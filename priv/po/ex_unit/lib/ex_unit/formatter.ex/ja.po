msgid ""
msgstr ""
"Project-Id-Version: l 10n_ex_unit\n"
"PO-Revision-Date: 2015-09-19 16:25+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.ExUnit.Formatter Summary
#: lib/ex_unit/formatter.ex:2
msgid ""
"This module holds helper functions related to formatting and contains\n"
"documentation about the formatting protocol.\n"
"\n"
"Formatters are registered at the `ExUnit.EventManager` event manager and\n"
"will be send events by the runner.\n"
"\n"
"The following events are possible:\n"
"\n"
"  * `{:suite_started, opts}` -\n"
"    the suite has started with the specified options to the runner.\n"
"\n"
"  * `{:suite_finished, run_us, load_us}` -\n"
"    the suite has finished. `run_us` and `load_us` are the run and load\n"
"    times in microseconds respectively.\n"
"\n"
"  * `{:case_started, test_case}` -\n"
"    a test case has started. See `ExUnit.TestCase` for details.\n"
"\n"
"  * `{:case_finished, test_case}` -\n"
"    a test case has finished. See `ExUnit.TestCase` for details.\n"
"\n"
"  * `{:test_started, test_case}` -\n"
"    a test case has started. See `ExUnit.Test` for details.\n"
"\n"
"  * `{:test_finished, test_case}` -\n"
"    a test case has finished. See `ExUnit.Test` for details.\n"
"\n"
msgstr ""
"このモジュールは、フォーマット関連のヘルパー関数を保持し、\n"
"フォーマットプロトコルについてのドキュメントを含みます。\n"
"\n"
"フォーマッタは`ExUnit.EventManager`イベントマネージャで\n"
"登録されrunnerによりイベントが送信されます。\n"
"\n"
"以下のイベントが可能です:\n"
"\n"
"  * `{:suite_started, opts}` -\n"
"    suiteはrunnerに指定されたオプションで開始しました。\n"
"\n"
"  * `{:suite_finished, run_us, load_us}` -\n"
"    suiteは終了しました。`run_us`と`load_us`は、それぞれ、\n"
"    runとloadの時間で、単位はマイクロ秒です。\n"
"\n"
"  * `{:case_started, test_case}` -\n"
"    テストケースは開始しました。\n"
"    詳細は、`ExUnit.TestCase`を参照してください。\n"
"\n"
"  * `{:case_finished, test_case}` -\n"
"    テストケースは終了しました。\n"
"    詳細は、`ExUnit.TestCase`を参照してください。\n"
"\n"
"  * `{:test_started, test_case}` -\n"
"    テストは開始しました。\n"
"    詳細は、`ExUnit.Test`を参照してください。\n"
"\n"
"  * `{:test_finished, test_case}` -\n"
"    テストは終了しました。\n"
"    詳細は、`ExUnit.Test`を参照してください。\n"
"\n"

#. TRANSLATORS: def ExUnit.Formatter.format_test_case_failure(test_case, failure, counter, width, formatter)
#: lib/ex_unit/formatter.ex:117
msgid "Receives a test case and formats its failure.\n"
msgstr "テストケースを受け取り、その失敗をフォーマットします。\n"

#. TRANSLATORS: def ExUnit.Formatter.format_test_failure(test, failure, counter, width, formatter)
#: lib/ex_unit/formatter.ex:105
msgid "Receives a test and formats its failure.\n"
msgstr "テストを受け取り、その失敗をフォーマットします。\n"

#. TRANSLATORS: def ExUnit.Formatter.format_time(run_us, load_us)
#: lib/ex_unit/formatter.ex:44
msgid ""
"Formats time taken running the test suite.\n"
"\n"
"It receives the time spent running the tests and\n"
"optionally the time spent loading the test suite.\n"
"\n"
"## Examples\n"
"\n"
"    iex> format_time(10000, nil)\n"
"    \"Finished in 0.01 seconds\"\n"
"\n"
"    iex> format_time(10000, 20000)\n"
"    \"Finished in 0.03 seconds (0.02s on load, 0.01s on tests)\"\n"
"\n"
"    iex> format_time(10000, 200000)\n"
"    \"Finished in 0.2 seconds (0.2s on load, 0.01s on tests)\"\n"
"\n"
msgstr ""
"test suiteの実行にかかった時間をフォーマットします。\n"
"\n"
"テスト実行に費した時間と、オプションでtest suite\n"
"のロードに費した時間を受け取ります。\n"
"\n"
"## 例\n"
"\n"
"    iex> format_time(10000, nil)\n"
"    \"Finished in 0.01 seconds\"\n"
"\n"
"    iex> format_time(10000, 20000)\n"
"    \"Finished in 0.03 seconds (0.02s on load, 0.01s on tests)\"\n"
"\n"
"    iex> format_time(10000, 200000)\n"
"    \"Finished in 0.2 seconds (0.2s on load, 0.01s on tests)\"\n"
"\n"

#. TRANSLATORS: def ExUnit.Formatter.format_filters(filters, type)
#: lib/ex_unit/formatter.ex:88
msgid ""
"Formats filters used to constrain cases to be run.\n"
"\n"
"## Examples\n"
"\n"
"    iex> format_filters([run: true, slow: false], :include)\n"
"    \"Including tags: [run: true, slow: false]\"\n"
"\n"
msgstr ""
"走らせるべきケースを含むフィルタをフォーマットします。\n"
"Formats filters used to constain cases to be run.\n"
"\n"
"## 例\n"
"\n"
"   iex> format_filters([run: true, slow: false], :include)\n"
"   \"Including tags: [run: true, slow: false]\"\n"
"\n"
