msgid ""
msgstr ""
"Project-Id-Version: l 10n_ex_unit\n"
"PO-Revision-Date: 2015-09-19 15:42+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.ExUnit.Case Summary
#: lib/ex_unit/case.ex:2
msgid ""
"Sets up an ExUnit test case.\n"
"\n"
"This module must be used in other modules as a way to configure\n"
"and prepare them for testing.\n"
"\n"
"When used, it accepts the following options:\n"
"\n"
"  * :async - configure Elixir to run that specific test case in parallel "
"with\n"
"    others. Must be used for performance when your test cases do not change\n"
"    any global state. It defaults to `false`.\n"
"\n"
"This module automatically includes all callbacks defined in\n"
"`ExUnit.Callbacks`. See that module's documentation for more\n"
"information.\n"
"\n"
"## Examples\n"
"\n"
"     defmodule AssertionTest do\n"
"       # Use the module\n"
"       use ExUnit.Case, async: true\n"
"\n"
"       # The `test` macro is imported by ExUnit.Case\n"
"       test \"always pass\" do\n"
"         assert true\n"
"       end\n"
"     end\n"
"\n"
"## Context\n"
"\n"
"All tests receive a context as an argument. The context is particularly\n"
"useful for sharing information between callbacks and tests:\n"
"\n"
"    defmodule KVTest do\n"
"      use ExUnit.Case\n"
"\n"
"      setup do\n"
"        {:ok, pid} = KV.start_link\n"
"        {:ok, [pid: pid]}\n"
"      end\n"
"\n"
"      test \"stores key-values\", context do\n"
"        assert KV.put(context[:pid], :hello, :world) == :ok\n"
"        assert KV.get(context[:pid], :hello) == :world\n"
"      end\n"
"    end\n"
"\n"
"As the context is a map, it can be pattern matched on to extract\n"
"information:\n"
"\n"
"    test \"stores key-values\", %{pid: pid} do\n"
"      assert KV.put(pid, :hello, :world) == :ok\n"
"      assert KV.get(pid, :hello) == :world\n"
"    end\n"
"\n"
"## Tags\n"
"\n"
"The context is used to pass information from the callbacks to\n"
"the test. In order to pass information from the test to the\n"
"callback, ExUnit provides tags.\n"
"\n"
"By tagging a test, the tag value can be accessed in the context,\n"
"allowing the developer to customize the test. Let's see an\n"
"example:\n"
"\n"
"    defmodule FileTest do\n"
"      # Changing directory cannot be async\n"
"      use ExUnit.Case, async: false\n"
"\n"
"      setup context do\n"
"        # Read the :cd tag value\n"
"        if cd = context[:cd] do\n"
"          prev_cd = File.cwd!\n"
"          File.cd!(cd)\n"
"          on_exit fn -> File.cd!(prev_cd) end\n"
"        end\n"
"\n"
"        :ok\n"
"      end\n"
"\n"
"      @tag cd: \"fixtures\"\n"
"      test \"reads utf-8 fixtures\" do\n"
"        File.read(\"hello\")\n"
"      end\n"
"    end\n"
"\n"
"In the example above, we have defined a tag called `:cd` that is\n"
"read in the setup callback to configure the working directory the\n"
"test is going to run on.\n"
"\n"
"Tags are also very effective when used with case templates\n"
"(`ExUnit.CaseTemplate`) allowing callbacks in the case template\n"
"to customize the test behaviour.\n"
"\n"
"Note a tag can be set in two different ways:\n"
"\n"
"    @tag key: value\n"
"    @tag :key       # equivalent to setting @tag key: true\n"
"\n"
"If a tag is given more than once, the last value wins.\n"
"\n"
"### Module tags\n"
"\n"
"A tag can be set for all tests in a module by setting `@moduletag`:\n"
"\n"
"    @moduletag :external\n"
"\n"
"If the same key is set via `@tag`, the `@tag` value has higher\n"
"precedence.\n"
"\n"
"### Known tags\n"
"\n"
"The following tags are set automatically by ExUnit and are\n"
"therefore reserved:\n"
"\n"
"  * `:case` - the test case module\n"
"  * `:test` - the test name\n"
"  * `:line` - the line on which the test was defined\n"
"  * `:file` - the file on which the test was defined\n"
"\n"
"The following tags customize how tests behaves:\n"
"\n"
"  * `:capture_log` - see Log Capture below.\n"
"  * `:skip` - skips the test with the given reason\n"
"  * `:timeout` - customizes the test timeout in milliseconds (defaults to "
"30000)\n"
"\n"
"## Filters\n"
"\n"
"Tags can also be used to identify specific tests, which can then\n"
"be included or excluded using filters. The most common functionality\n"
"is to exclude some particular tests from running, which can be done\n"
"via `ExUnit.configure/1`:\n"
"\n"
"    # Exclude all external tests from running\n"
"    ExUnit.configure(exclude: [external: true])\n"
"\n"
"From now on, ExUnit will not run any test that has the `external` flag\n"
"set to `true`. This behaviour can be reversed with the `:include` option\n"
"which is usually passed through the command line:\n"
"\n"
"    mix test --include external:true\n"
"\n"
"Run `mix help test` for more information on how to run filters via Mix.\n"
"\n"
"Another use case for tags and filters is to exclude all tests that have\n"
"a particular tag by default, regardless of its value, and include only\n"
"a certain subset:\n"
"\n"
"    ExUnit.configure(exclude: :os, include: [os: :unix])\n"
"\n"
"Keep in mind that all tests are included by default, so unless they are\n"
"excluded first, the `include` option has no effect.\n"
"\n"
"## Log Capture\n"
"\n"
"ExUnit can optionally supress printing of log messages that are generated "
"during a test. Log\n"
"messages generated while running a test are captured and only if the test "
"fails are they printed\n"
"to aid with debugging.\n"
"\n"
"You can opt into this behavior for individual tests by tagging them with `:"
"capture_log` or enable\n"
"log capture for all tests in the ExUnit configuration:\n"
"\n"
"    config :ex_unit, capture_log: true\n"
"\n"
"This default can be overriden by `@tag capture_log: false` or `@moduletag "
"capture_log: false`.\n"
"\n"
"Since `setup_all` blocks don't belong to a specific test, log messages "
"generated in them (or \n"
"between tests) are never captured. If you want to supress these messages as "
"well, remove the\n"
"console backend globally:\n"
"\n"
"    config :logger, backends: []\n"
msgstr ""
"ExUnitテストケースをセットアップします。\n"
"\n"
"テストの構成と準備をさせる方法として、このモジュールが、\n"
"他のモジュールで使われなければなりません。\n"
"\n"
"使われるとき、以下のオプションを受入ます:\n"
"\n"
"  * :async - Elixirを他と並列に特定のテストケースを走らせるよう\n"
"    構成します。そのテストが全くグローバルステートを変更しないとき、\n"
"    パフォーマンスのために使われなければなりません。\n"
"    デフォルトは`false`です。\n"
"\n"
"このモジュールは、`ExUnit.Callbacks`で定義された、\n"
"全てのコールバックを自動的に含みます。詳細はそのモジュール\n"
"ドキュメントを参照してください。\n"
"\n"
"## 例\n"
"\n"
"     defmodule AssertionTest do\n"
"       # Use the module\n"
"       use ExUnit.Case, async: true\n"
"\n"
"       # The `test` macro is imported by ExUnit.Case\n"
"       test \"always pass\" do\n"
"         assert true\n"
"       end\n"
"     end\n"
"\n"
"## コンテキスト\n"
"\n"
"全てのテストは、引数としてコンテキストを受け取ります。コンテキストは\n"
"特にコールバックとテストの間で情報を共有するために役立ちます:\n"
"\n"
"    defmodule KVTest do\n"
"      use ExUnit.Case\n"
"\n"
"      setup do\n"
"        {:ok, pid} = KV.start_link\n"
"        {:ok, [pid: pid]}\n"
"      end\n"
"\n"
"      test \"stores key-values\", context do\n"
"        assert KV.put(context[:pid], :hello, :world) == :ok\n"
"        assert KV.get(context[:pid], :hello) == :world\n"
"      end\n"
"    end\n"
"\n"
"コンテキストはマップなので、情報の抽出にパターンマッチングを\n"
"使うことができます:\n"
"\n"
"    test \"stores key-values\", %{pid: pid} do\n"
"      assert KV.put(pid, :hello, :world) == :ok\n"
"      assert KV.get(pid, :hello) == :world\n"
"    end\n"
"\n"
"## タグ\n"
"\n"
"コンテキストはコールバックからテストへ情報を渡すために使わ\n"
"れます。テストからコールバックへ情報を渡すために、ExUnitは\n"
"タグを提供します。\n"
"\n"
"テストにタグを付けることで、タグの値はコンテキストでアクセス\n"
"可能になり、開発者にテストをカスタマイズすることを許します。\n"
"例を見ましょう:\n"
"\n"
"    defmodule FileTest do\n"
"      # Changing directory cannot be async\n"
"      use ExUnit.Case, async: false\n"
"\n"
"      setup context do\n"
"        # Read the :cd tag value\n"
"        if cd = context[:cd] do\n"
"          prev_cd = File.cwd!\n"
"          File.cd!(cd)\n"
"          on_exit fn -> File.cd!(prev_cd) end\n"
"        end\n"
"\n"
"        :ok\n"
"      end\n"
"\n"
"      @tag cd: \"fixtures\"\n"
"      test \"reads utf-8 fixtures\" do\n"
"        File.read(\"hello\")\n"
"      end\n"
"    end\n"
"\n"
"上の例では、テストが走る作業ディレクトリを構成するために、\n"
"セットアップコールバックで読まれる、`:cd`と呼ばれるタグを\n"
"定義しました。\n"
"\n"
"ケーステンプレートのコールバックに\n"
"テストの振舞いをカスタマイズすることを許す、\n"
"ケーステンプレート(`ExUnit.CaseTemplates`)と一緒に使うとき、\n"
"タグも非常に効果的です。\n"
"\n"
"タグは二つの異る方法でセット出来ることに気を付けてください:\n"
"\n"
"    @tag key: value\n"
"    @tag :key       # @tag key: true と同じです\n"
"\n"
"もしタグが一つ以上与えられたら、最後の値が勝ちます。\n"
"\n"
"### モジュールタグ\n"
"\n"
"`@moduletag`のセットにより、モジュールの全てのテストのために、\n"
"タグをセットすることが出来ます:\n"
"タグ\n"
"    @moduletag :external\n"
"\n"
"もし同じキーが`@tag`によりセットされたら、`@tag`の値が\n"
"より高い優先順位をもちます。\n"
"\n"
"### Known tags\n"
"\n"
"以下のタグはExUnitにより自動的にセットされるので、\n"
"予約されています:\n"
"\n"
"  * `:case` - テストケースモジュール\n"
"  * `:test` - テスト名\n"
"  * `:line` - テストが定義された行\n"
"  * `:file` - テストが定義されたファイル\n"
"\n"
"以下のタグはテストがどのように振る舞うかを\n"
"カスタマイズします:\n"
"\n"
"  * `:capture_log` - 下記の Log Capture を参照\n"
"  * `:skip` - 与えられたreasonでテストをスキップします\n"
"  * `:timeout` - テストのタイムアウトをミリ秒でカスタマイズします\n"
"    (デフォルトは30000)\n"
"\n"
"## フィルタ\n"
"\n"
"タグは、特定のテストを識別するために使うこともできます。\n"
"それにより、フィルタを使って含むか除外するの指定ができます。\n"
"最も一般的な機能は、`ExUnit.configure/1`により\n"
"可能な、テスト実行時に特定のテストを除外することです:\n"
"\n"
"    # Exclude all external tests from running\n"
"    ExUnit.configure(exclude: [external: true])\n"
"\n"
"今後、ExUnitは`external`フラグがtrueとなる全てのテストは実\n"
"行しません。この振舞いは、通常`:include`オプションを\n"
"コマンドラインから渡すことで反転できます:\n"
"\n"
"    mix test --include external:true\n"
"\n"
"Mixによりフィルタを実行する方法の詳細は、\n"
"`mix help test`を実行してください。\n"
"\n"
"タグとフィルタのもう一つのユースケースは、値に関係なく、\n"
"デフォルトで全てのテストを除外する特定のタグがあり、\n"
"特定のサブセットだけを含む場合です:\n"
"\n"
"    ExUnit.configure(exclude: :os, include: [os: :unix])\n"
"\n"
"全てのテストはデフォルトで含まれているため、\n"
"それらが最初に除外されない限り、`include`オプションは\n"
"効果がない事を心に留めておいてください。\n"
"\n"
"## Log Capture\n"
"\n"
"ExUnitはオプションでテスト中のログメッセージの生成を抑止することが\n"
"できます。テスト中に生成されたログメッセージはキャプチャされ、\n"
"テストが失敗したら、デバッグのため表示されます。\n"
"\n"
"テストとは独立してこの振る舞いを`:capture_log`タグで指定するか、\n"
"ExUnitコンフィグレーションで指定できます:\n"
"\n"
"    config :ex_unit, capture_log: true\n"
"\n"
"デフォルトは`@tag capture_log: false`か`@moduletag caputure_log: false`により\n"
"上書くことができます。\n"
"\n"
"`setup_all`ブロックは特定のテストに属していないので、それら(またはテスト間)\n"
"で生成されたログメッセージは決してキャプチャされません。\n"
"もし同様にこれらのメッセージを抑制したいなら、グローバルに\n"
"コンソールバックエンドを取り除きなさい:\n"
"\n"
"    config :logger, backends: []\n"

#. TRANSLATORS: defmacro ExUnit.Case.test(message, var \\ quote() do;  _;end, contents)
#: lib/ex_unit/case.ex:209
msgid ""
"Defines a test with a string.\n"
"\n"
"Provides a convenient macro that allows a test to be\n"
"defined with a string. This macro automatically inserts\n"
"the atom `:ok` as the last line of the test. That said,\n"
"a passing test always returns `:ok`, but, more importantly,\n"
"it forces Elixir to not tail call optimize the test and\n"
"therefore avoids hiding lines from the backtrace.\n"
"\n"
"## Examples\n"
"\n"
"    test \"true is equal to true\" do\n"
"      assert true == true\n"
"    end\n"
"\n"
msgstr ""
"文字列でテストを定義します。\n"
"\n"
"文字列でテストを定義することを許す便利なマクロを提供\n"
"します。このマクロは、テストの最後の行として、\n"
"アトム`:ok`を自動的に挿入します。それは、\n"
"テストは常に`:ok`を返すということですが、もっと重要な\n"
"ことは、Elixirに、末尾再帰最適化をさせないように強制\n"
"し、バックトレースから行番号を隱すことを避けます。\n"
"\n"
"## 例\n"
"\n"
"    test \"true is equal to true\" do\n"
"      assert true == true\n"
"    end\n"
"\n"

#. TRANSLATORS: defmacro ExUnit.Case.test(message)
#: lib/ex_unit/case.ex:251
msgid ""
"Defines a not implemented test with a string.\n"
"\n"
"Provides a convenient macro that allows a test to be\n"
"defined with a string, but not yet implemented. The\n"
"resulting test will always fail and print \"Not yet\n"
"implemented\" error message. The resulting test case is\n"
"also tagged with :not_implemented.\n"
"\n"
"## Examples\n"
"\n"
"    test \"this will be a test in future\"\n"
"\n"
msgstr ""
"文字列で実装していないテストを定義します。\n"
"\n"
"テストを文字列で定義するが、決して実装されない\n"
"ことを許す、便利なマクロを提供します。\n"
"テストの結果は常にfailで\"Not yet implemented\"エラー\n"
"メッセージが表示されます。テストケースの結果は\n"
":not_implementedとタグ付られます。\n"
"\n"
"## Examples\n"
"\n"
"    test \"this will be a test in future\"\n"
"\n"
