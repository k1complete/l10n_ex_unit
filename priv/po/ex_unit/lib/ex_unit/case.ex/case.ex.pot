#. TRANSLATORS: Elixir.ExUnit.Case Summary
#: lib/ex_unit/case.ex:2 
msgid ""
"Sets up an ExUnit test case.\n"
"\n"
"This module must be used in other modules as a way to configure\n"
"and prepare them for testing.\n"
"\n"
"When used, it accepts the following options:\n"
"\n"
"  * :async - configure Elixir to run that specific test case in parallel with\n"
"    others. Must be used for performance when your test cases do not change\n"
"    any global state. It defaults to `false`.\n"
"\n"
"This module automatically includes all callbacks defined in\n"
"`ExUnit.Callbacks`. See that module's documentation for more\n"
"information.\n"
"\n"
"## Examples\n"
"\n"
"     defmodule AssertionTest do\n"
"       # Use the module\n"
"       use ExUnit.Case, async: true\n"
"\n"
"       # The \"test\" macro is imported by ExUnit.Case\n"
"       test \"always pass\" do\n"
"         assert true\n"
"       end\n"
"     end\n"
"\n"
"## Context\n"
"\n"
"All tests receive a context as an argument. The context is particularly\n"
"useful for sharing information between callbacks and tests:\n"
"\n"
"    defmodule KVTest do\n"
"      use ExUnit.Case\n"
"\n"
"      setup do\n"
"        {:ok, pid} = KV.start_link\n"
"        {:ok, [pid: pid]}\n"
"      end\n"
"\n"
"      test \"stores key-values\", context do\n"
"        assert KV.put(context[:pid], :hello, :world) == :ok\n"
"        assert KV.get(context[:pid], :hello) == :world\n"
"      end\n"
"    end\n"
"\n"
"As the context is a map, it can be pattern matched on to extract\n"
"information:\n"
"\n"
"    test \"stores key-values\", %{pid: pid} do\n"
"      assert KV.put(pid, :hello, :world) == :ok\n"
"      assert KV.get(pid, :hello) == :world\n"
"    end\n"
"\n"
"## Tags\n"
"\n"
"The context is used to pass information from the callbacks to\n"
"the test. In order to pass information from the test to the\n"
"callback, ExUnit provides tags.\n"
"\n"
"By tagging a test, the tag value can be accessed in the context,\n"
"allowing the developer to customize the test. Let's see an\n"
"example:\n"
"\n"
"    defmodule FileTest do\n"
"      # Changing directory cannot be async\n"
"      use ExUnit.Case, async: false\n"
"\n"
"      setup context do\n"
"        # Read the :cd tag value\n"
"        if cd = context[:cd] do\n"
"          prev_cd = File.cwd!\n"
"          File.cd!(cd)\n"
"          on_exit fn -> File.cd!(prev_cd) end\n"
"        end\n"
"\n"
"        :ok\n"
"      end\n"
"\n"
"      @tag cd: \"fixtures\"\n"
"      test \"reads utf-8 fixtures\" do\n"
"        File.read(\"hello\")\n"
"      end\n"
"    end\n"
"\n"
"In the example above, we have defined a tag called `:cd` that is\n"
"read in the setup callback to configure the working directory the\n"
"test is going to run on.\n"
"\n"
"Tags are also very effective when used with case templates\n"
"(`ExUnit.CaseTemplate`) allowing callbacks in the case template\n"
"to customize the test behaviour.\n"
"\n"
"Note a tag can be set in two different ways:\n"
"\n"
"    @tag key: value\n"
"    @tag :key       # equivalent to setting @tag key: true\n"
"\n"
"If a tag is given more than once, the last value wins.\n"
"\n"
"### Module tags\n"
"\n"
"A tag can be set for all tests in a module by setting `@moduletag`:\n"
"\n"
"    @moduletag :external\n"
"\n"
"If the same key is set via `@tag`, the `@tag` value has higher\n"
"precedence.\n"
"\n"
"### Known tags\n"
"\n"
"The following tags are set automatically by ExUnit and are\n"
"therefore reserved:\n"
"\n"
"  * `:case` - the test case module\n"
"  * `:test` - the test name\n"
"  * `:line` - the line on which the test was defined\n"
"  * `:file` - the file on which the test was defined\n"
"\n"
"The following tags customize how tests behaves:\n"
"\n"
"  * `:capture_log` - see the \"Log Capture\" section below\n"
"  * `:skip` - skips the test with the given reason\n"
"  * `:timeout` - customizes the test timeout in milliseconds (defaults to 30000)\n"
"  * `:report` - include the given tags on error reports, see the \"Reporting tags\" section\n"
"\n"
"### Reporting tags\n"
"\n"
"ExUnit also allows tags to be included in error reports, making\n"
"it easy for developers to see under which circunstances a test\n"
"was evaluated. To do so, you use the `:report` tag:\n"
"\n"
"    @moduletag report: [:user_id]\n"
"\n"
"## Filters\n"
"\n"
"Tags can also be used to identify specific tests, which can then\n"
"be included or excluded using filters. The most common functionality\n"
"is to exclude some particular tests from running, which can be done\n"
"via `ExUnit.configure/1`:\n"
"\n"
"    # Exclude all external tests from running\n"
"    ExUnit.configure(exclude: [external: true])\n"
"\n"
"From now on, ExUnit will not run any test that has the `external` flag\n"
"set to `true`. This behaviour can be reversed with the `:include` option\n"
"which is usually passed through the command line:\n"
"\n"
"    mix test --include external:true\n"
"\n"
"Run `mix help test` for more information on how to run filters via Mix.\n"
"\n"
"Another use case for tags and filters is to exclude all tests that have\n"
"a particular tag by default, regardless of its value, and include only\n"
"a certain subset:\n"
"\n"
"    ExUnit.configure(exclude: :os, include: [os: :unix])\n"
"\n"
"Keep in mind that all tests are included by default, so unless they are\n"
"excluded first, the `include` option has no effect.\n"
"\n"
"## Log Capture\n"
"\n"
"ExUnit can optionally suppress printing of log messages that are generated during a test. Log\n"
"messages generated while running a test are captured and only if the test fails are they printed\n"
"to aid with debugging.\n"
"\n"
"You can opt into this behavior for individual tests by tagging them with `:capture_log` or enable\n"
"log capture for all tests in the ExUnit configuration:\n"
"\n"
"    config :ex_unit, capture_log: true\n"
"\n"
"This default can be overriden by `@tag capture_log: false` or `@moduletag capture_log: false`.\n"
"\n"
"Since `setup_all` blocks don't belong to a specific test, log messages generated in them (or \n"
"between tests) are never captured. If you want to suppress these messages as well, remove the\n"
"console backend globally:\n"
"\n"
"    config :logger, backends: []\n"
msgstr ""
#. TRANSLATORS: defmacro ExUnit.Case.test(message, var \\ quote() do;  _;end, contents)
#: lib/ex_unit/case.ex:220 
msgid ""
"Defines a test with a string.\n"
"\n"
"Provides a convenient macro that allows a test to be\n"
"defined with a string. This macro automatically inserts\n"
"the atom `:ok` as the last line of the test. That said,\n"
"a passing test always returns `:ok`, but, more importantly,\n"
"it forces Elixir to not tail call optimize the test and\n"
"therefore avoids hiding lines from the backtrace.\n"
"\n"
"## Examples\n"
"\n"
"    test \"true is equal to true\" do\n"
"      assert true == true\n"
"    end\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro ExUnit.Case.test(message)
#: lib/ex_unit/case.ex:262 
msgid ""
"Defines a not implemented test with a string.\n"
"\n"
"Provides a convenient macro that allows a test to be\n"
"defined with a string, but not yet implemented. The\n"
"resulting test will always fail and print \"Not yet\n"
"implemented\" error message. The resulting test case is\n"
"also tagged with :not_implemented.\n"
"\n"
"## Examples\n"
"\n"
"    test \"this will be a test in future\"\n"
"\n"
msgstr ""
