msgid ""
msgstr ""
"Project-Id-Version: l 10n_ex_unit\n"
"PO-Revision-Date: 2015-09-27 12:25+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def ExUnit.CaptureLog.capture_log(opts \\ [], fun)
#: lib/ex_unit/capture_log.ex:34
msgid ""
"Captures Logger messages generated when evaluating `fun`.\n"
"\n"
"Returns the binary which is the captured output.\n"
"\n"
"This function mutes the `:console` backend\n"
"and captures any log messages sent to Logger.\n"
"\n"
"Note that when the `async` is set to `true`,\n"
"the messages from another test might be captured.\n"
"\n"
"It is possible to configure the level to capture with `:level`,\n"
"which will set the capturing level for the duration of the\n"
"capture, for instance, if the log level is set to :error\n"
"any message with the lower level will be ignored.\n"
"The default level is `nil`, which will capture all messages.\n"
"The behaviour is undetermined if async tests change Logger level.\n"
"\n"
"The format, metadata and colors can be configured with `:format`,\n"
"`:metadata` and `:colors` respectively. These three options\n"
"defaults to the `:console` backend configuration parameters.\n"
msgstr ""
"`fun`を評価したときに生成されたlogerメッセージをキャプチャします。\n"
"\n"
"キャプチャされた出力をバイナリで返します。\n"
"\n"
"この関数は、`:console`バックエンドをミュートして\n"
"Loggerへ送られたログメッセージを全てキャプチャします。\n"
"\n"
"`async`が`true`にセットされとき、他のテストからの\n"
"メッセージがキャプチャされるかもしれないことに注意してください。\n"
"\n"
"`:level`でキャプチャするレベルを設定することができます。\n"
"キャプチャの期間に設定されたキャプチャレベルは、たとえば、\n"
"ログレベルを:errorにセットしたら、より低いレベルの全ての\n"
"メッセージは無視されます。\n"
"デフォルトのレベルは`nil`で、全てのメッセージをキャプチャします。\n"
"asyncテストがLoggerレベルを変更したら、振る舞いは未決定です。\n"
"\n"
"フォーマット、メタデータ、カラーは設定することができ、\n"
"それぞれ`:format`, `:metadata`と`:colors`です。\n"
"それら三つのオプションのデフォルトは`:console`バックエンドの\n"
"コンフィグレーションパラメタです。\n"

#. TRANSLATORS: Elixir.ExUnit.CaptureLog Summary
#: lib/ex_unit/capture_log.ex:2
msgid ""
"Functionality to capture logs for testing.\n"
"\n"
"## Examples\n"
"\n"
"    defmodule AssertionTest do\n"
"      use ExUnit.Case\n"
"\n"
"      import ExUnit.CaptureLog\n"
"\n"
"      test \"example\" do\n"
"        assert capture_log(fn ->\n"
"          Logger.error \"log msg\"\n"
"        end) =~ \"log msg\"\n"
"      end\n"
"\n"
"      test \"check multiple captures concurrently\" do\n"
"        fun = fn ->\n"
"          for msg <- [\"hello\", \"hi\"] do\n"
"            assert capture_log(fn -> Logger.error msg end) =~ msg\n"
"          end\n"
"          Logger.debug \"testing\"\n"
"        end\n"
"        assert capture_log(fun) =~ \"hello\"\n"
"        assert capture_log(fun) =~ \"testing\"\n"
"      end\n"
"    end\n"
"\n"
msgstr ""
"テストのために、logを補足する機能です。\n"
"\n"
"## Examples\n"
"\n"
"    defmodule AssertionTest do\n"
"      use ExUnit.Case\n"
"\n"
"      import ExUnit.CaptureLog\n"
"\n"
"      test \"example\" do\n"
"        assert capture_log(fn ->\n"
"          Logger.error \"log msg\"\n"
"        end) =~ \"log msg\"\n"
"      end\n"
"\n"
"      test \"check multiple captures concurrently\" do\n"
"        fun = fn ->\n"
"          for msg <- [\"hello\", \"hi\"] do\n"
"            assert capture_log(fn -> Logger.error msg end) =~ msg\n"
"          end\n"
"          Logger.debug \"testing\"\n"
"        end\n"
"        assert capture_log(fun) =~ \"hello\"\n"
"        assert capture_log(fun) =~ \"testing\"\n"
"      end\n"
"    end\n"
"\n"
